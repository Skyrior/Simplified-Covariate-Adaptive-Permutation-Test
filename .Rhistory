1+3
is.wholenumber(1)
check.integer(3)
1.3%%1
2.0%%1
2.0%%1==0
set.seed(9.4)
set.seed(abc)
set.seed("abc")
tryCatch(set.seed(seed),
error = function(){
message("Supplied seed cannot be coerced into an integer
in get.permute().")
}
## Charles Shi
## Question 2 for the Research Professional Assessment for Shaikh
## & Tabord-Meehan.
## github repository:
## https://github.com/Skyrior/Simplified-Covariate-Adaptive-Permutation-Test
## -- get.permute (int N, int seed) --
## A permutation is a mapping from {1, ..., N} to {1, ..., N}.
## The get.permute function constructs a random permutation.
##
## -- Arguments --
## N: integer in [1, \infty).
##
## -- Optional Arguments --
## seed: If supplied, gives a permutation that is randomized
## according to the given seed.
##
## -- Returns --
## Vector[Tuple] - a vector of 2-tuples.
get.permute <- function(N, seed){
## Attempts to set the seed if the argument was supplied.
if(!(missing(seed))){
tryCatch(set.seed(seed),
error = function(){
message("Supplied seed cannot be coerced into an integer
in get.permute().")
}
)
}
## input checks
if(((N%%1 == 0) && (N>=1)) || (seed%%1 == 0)){
}
}
get.permute <- function(N, seed){
## Attempts to set the seed if the argument was supplied.
if(!(missing(seed))){
tryCatch(set.seed(seed),
error = function(){
message("Supplied seed cannot be coerced into an integer
in get.permute().")
}
)
}
## input checks
if(((N%%1 == 0) && (N>=1)) || (seed%%1 == 0)){
}
}
get.permute(3, 9)
get.permute(4, "bc")
get.permute <- function(N, seed){
## Attempts to set the seed if the argument was supplied.
if(!(missing(seed))){
tryCatch(set.seed(seed),
error = function(cond){
message("Supplied seed cannot be coerced into an integer
in get.permute().")
}
)
}
## input checks
if(((N%%1 == 0) && (N>=1)) || (seed%%1 == 0)){
}
}
get.permute(4, "bc")
get.permute <- function(N, seed){
## Attempts to set the seed if the argument was supplied.
if(!(missing(seed))){
tryCatch(set.seed(seed),
error = function(cond){
message("Supplied seed cannot be coerced into an integer
in get.permute().")
}
)
}
## input checks
if(((N%%1 == 0) && (N>=1)) || (seed%%1 == 0)){
if(debug) message("done!")
}
}
get.permute(3, 9)
debug = TRUE
get.permute <- function(N, seed){
## Attempts to set the seed if the argument was supplied.
if(!(missing(seed))){
tryCatch(set.seed(seed),
error = function(cond){
message("Supplied seed cannot be coerced into an integer
in get.permute().")
}
)
}
## input checks
if(((N%%1 == 0) && (N>=1)) || (seed%%1 == 0)){
if(debug) message("done!")
}
}
get.permute(3, 9)
get.permute(0.7, 9)
get.permute(0.7, -9.35)
get.permute(0.7, 2)
get.permute(-9, 2)
get.permute <- function(N, seed){
## Attempts to set the seed if the argument was supplied.
if(!(missing(seed))){
tryCatch(set.seed(seed),
error = function(cond){
message("Supplied seed cannot be coerced into an integer
in get.permute().")
}
)
}
## input checks
if((N%%1 == 0) && (N>=1)){
if(debug) message("done!")
}
}
get.permute(-9, 2)
get.permute(0.7, 2)
get.permute(0.9, 4)
get.permute <- function(N, seed){
if(debug) message("Calling get.permute() with arguments ", N, " and ", seed)
## Attempts to set the seed if the argument was supplied.
if(!(missing(seed))){
tryCatch(set.seed(seed),
error = function(cond){
message("Supplied seed cannot be coerced into an integer
in get.permute().")
}
)
}
## input checks
if((N%%1 == 0) && (N>=1)){
if(debug) message("Input in get.permute validated.")
}
## resets the seed
set.seed(NULL)
## output the permutation
}
get.permute(0.9, 4)
get.permute(7, 4)
get.permute <- function(N, seed){
if(debug) message("Calling get.permute() with arguments ", N, " and ", seed)
## Attempts to set the seed if the argument was supplied.
if(!(missing(seed))){
tryCatch(set.seed(seed),
error = function(cond){
message("Supplied seed cannot be coerced into an integer
in get.permute().")
}
)
}
## input checks
if(!((N%%1 == 0) && (N>=1))){
stop("Supplied 'N' in get.permute() is not a positive integer.")
}
if(debug) message("Input in get.permute validated.")
n <- as.integer(N)
## resets the seed
set.seed(NULL)
## output the permutation
}
get.permute(7, 4)
get.permute(5.4, 4)
get.permute("abc", 4)
get.permute(5.4, 4)
get.permute <- function(N, seed){
if(debug) message("Calling get.permute() with arguments ", N, " and ", seed)
## Attempts to set the seed if the argument was supplied.
if(!(missing(seed))){
tryCatch(set.seed(seed),
error = function(cond){
message("Supplied seed cannot be coerced into an integer
in get.permute().")
}
)
}
## input checks
tryCatch((l <- (N%%1 == 0) && (N>=1)),
error = function(cond){
message("Supplied 'N' in get.permute() is not a positive integer.")
},
finally = function(cond){
if(l) stop("Supplied 'N' in get.permute() is not a positive integer.")
})
if(debug) message("Input in get.permute validated.")
n <- as.integer(N)
## resets the seed
set.seed(NULL)
## output the permutation
}
get.permute(5.4, 4)
get.permute("and", 4)
get.permute <- function(N, seed){
if(debug) message("Calling get.permute() with arguments ", N, " and ", seed)
## Attempts to set the seed if the argument was supplied.
if(!(missing(seed))){
tryCatch(set.seed(seed),
error = function(cond){
message("Supplied seed cannot be coerced into an integer
in get.permute().")
}
)
}
## input checks
tryCatch(l <- (N%%1 == 0) && (N>=1),
error = function(cond){
message("Supplied 'N' in get.permute() is not a positive integer.")
},
finally = function(cond){
if(l) stop("Supplied 'N' in get.permute() is not a positive integer.")
})
if(debug) message("Input in get.permute validated.")
n <- as.integer(N)
## resets the seed
set.seed(NULL)
## output the permutation
}
get.permute("and", 4)
get.permute("and", "and")
get.permute <- function(N, seed){
if(debug) message("Calling get.permute() with arguments ", N, " and ", seed)
## Attempts to set the seed if the argument was supplied.
if(!(missing(seed))){
tryCatch(set.seed(seed),
error = function(cond){
stop("Supplied seed cannot be coerced into an integer
in get.permute().")
}
)
}
## input checks
tryCatch(l <- (N%%1 == 0) && (N>=1),
error = function(cond){
stop("Supplied 'N' in get.permute() is not a positive integer.")
},
finally = function(cond){
if(l) stop("Supplied 'N' in get.permute() is not a positive integer.")
})
if(debug) message("Input in get.permute validated.")
n <- as.integer(N)
## resets the seed
set.seed(NULL)
## output the permutation
}
get.permute("and", "and")
get.permute("and", 3)
get.permute(3.7, 3)
l = 0
get.permute(3.7, 3)
get.permute <- function(N, seed){
if(debug) message("Calling get.permute() with arguments ", N, " and ", seed)
## Attempts to set the seed if the argument was supplied.
if(!(missing(seed))){
tryCatch(set.seed(seed),
error = function(cond){
stop("Supplied seed cannot be coerced into an integer
in get.permute().")
}
)
}
## input checks
tryCatch({a <- (N%%1 == 0) && (N>=1)},
error = function(a){
stop("Supplied 'N' in get.permute() is not a positive integer.")
},
finally = function(a){
if(a) stop("Supplied 'N' in get.permute() is not a positive integer.")
})
if(debug) message("Input in get.permute validated.")
n <- as.integer(N)
## resets the seed
set.seed(NULL)
## output the permutation
}
get.permute(3.7, 3)
get.permute <- function(N, seed){
if(debug) message("Calling get.permute() with arguments ", N, " and ", seed)
## Attempts to set the seed if the argument was supplied.
if(!(missing(seed))){
tryCatch(set.seed(seed),
error = function(cond){
stop("Supplied seed cannot be coerced into an integer
in get.permute().")
}
)
}
## input checks
tryCatch({a <- ((N%%1 == 0) && (N>=1))},
error = function(a){
stop("Supplied 'N' in get.permute() is not a positive integer.")
},
finally = function(a){
if(a) stop("Supplied 'N' in get.permute() is not a positive integer.")
})
if(debug) message("Input in get.permute validated.")
n <- as.integer(N)
## resets the seed
set.seed(NULL)
## output the permutation
}
get.permute(3.7, 3)
get.permute <- function(N, seed){
if(debug) message("Calling get.permute() with arguments ", N, " and ", seed)
## Attempts to set the seed if the argument was supplied.
if(!(missing(seed))){
tryCatch(set.seed(seed),
error = function(cond){
stop("Supplied seed cannot be coerced into an integer
in get.permute().")
}
)
}
## input checks
tryCatch({a <- ((N%%1 == 0) && (N>=1))},
error = function(a){
stop("Supplied 'N' in get.permute() is not a positive integer.")
},
finally = {
if(a) stop("Supplied 'N' in get.permute() is not a positive integer.")
})
if(debug) message("Input in get.permute validated.")
n <- as.integer(N)
## resets the seed
set.seed(NULL)
## output the permutation
}
get.permute(3.7, 3)
a <- ((N%%1 == 0) && (N>=1))
a <- ((2%%1 == 0) && (2>=1))
a <- ((2.3%%1 == 0) && (2.3>=1))
install.packages("foreach")
help
install.packages("foreach")
