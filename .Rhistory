return(sum(rejects))
}
## -- TEST STATISTICS IMPLEMENTATION --
##
##
## -- t1 (List data, int m, int n) --
## T_{m, n} = | sqrt(N) (X_m - Y_n) |, where X_m, Y_n are the sample means.
##
## -- Arguments --
## data: Z = (X_1, X_2, ..., X_m, Y_1, Y_2, ..., Y_n)
##
## -- Optional Arguments
## m: Demarcates where to cutoff the data to get (X_1, ..., X_m). Default
##    is the gm variable.
## n: Sanity check to ensure m+n adds up. Default is the gn variable.
##
## -- Returns --
## r - The computed test statistic.
t1 <- function(data, m=gm, n=gn){
if(debug) message("Calling test statistic 1 with ", data, ", ", m,
" and ", n)
## input checks
if(!reduce(data,
function(a, b){a && is.numeric(b)},
.init=TRUE)) stop("The data supplied to test statistic 1",
" is not numeric.")
if(!is.numeric(m) || !is.numeric(n)) stop("m or n supplied ",
"to test statistic 1 is not",
" numeric.")
if(!((m+n)==length(data))) message("Warning: m+n =/= N in test",
" statistic 1.")
b <- splitAt(data, m+1)
x <- b[1]
y <- b[2]
x.mean <- mean(unlist(x))
y.mean <- mean(unlist(y))
r <- abs((sqrt(length(data)))*(x.mean-y.mean))
if(debug) message("Computed t1 statistic: ", r)
return(r)
}
## -- t2 (List data, int m, int n) --
## T_{m, n} = t1_{m, n} / sqrt(N/m V(X_1, ..., X_m) + N/m V(Y_1, ..., Y_n)),
## where V is the variance operator.
##
## -- Arguments --
## data: Z = (X_1, X_2, ..., X_m, Y_1, Y_2, ..., Y_n)
##
## -- Optional Arguments
## m: Demarcates where to cutoff the data to get (X_1, ..., X_m). Default
##    is the gm variable.
## n: Sanity check to ensure m+n adds up. Default is the gn variable.
##
## -- Returns --
## r - The computed test statistic.
t2 <- function(data, m=gm, n=gn){
if(debug) message("Calling test statistic 2 with ", data, ", ", m,
" and ", n)
## input checks
if(!reduce(data,
function(a, b){a && is.numeric(b)},
.init=TRUE)) stop("The data supplied to test statistic 2",
" is not numeric.")
if(!is.numeric(m) || !is.numeric(n)) stop("m or n supplied ",
"to test statistic 2 is not",
" numeric.")
if(!((m+n)==length(data))) message("Warning: m+n =/= N in test",
" statistic 2.")
b <- splitAt(data, m+1)
x <- b[1]
y <- b[2]
N <- length(data)
t1 <- t1(data, m, n)
x.var <- var(unlist(x))
y.var <- var(unlist(y))
r <- t1/(sqrt((N/m)*x.var + (N/m)*y.var))
if(debug) message("Computed t2 statistic: ", r)
return(r)
}
## -- AUXILLARY FUNCTIONS BELOW --
##
##
## -- get.permute (int N,) --
## A permutation is a mapping from {1, ..., N} to {1, ..., N}.
## The get.permute function constructs a random permutation.
##
## -- Arguments --
## N: integer in [1, \infty).
##
## -- Returns --
## List[] - a list of the second components of the permutation, in order.
## For example if a permutation is {(1, 3), (2, 1), (3, 2)}
## then this function outputs {3, 1, 2}.
get.permute <- function(N){
if(debug) message("Calling get.permute() with arguments ", N)
## input checks
tryCatch({tempvar <<- ((N%%1 == 0) && (N>=1))},
error = function(a){
stop("Supplied 'N' in get.permute() is not a positive integer.")
})
if(!tempvar) stop("Supplied 'N' in get.permute() is not a positive integer.")
if(debug) message("Input in get.permute validated.")
n <- as.integer(N)
## create a list from 1 to N
li <- 1:N
## produces a random, unbiased permutation with Fisher-Yates shuffle
r <- sample(li)
if(debug) message("Permutation generated in get.permute: ", r)
## output the permutation
return(r)
}
## -- apply.permute (List list, List permutation) --
## Applies a permutation on the given list, effectively shuffling it.
##
## -- Arguments --
## list: Any generic list.
##
## -- Optional Arguments --
## permutation: If supplied, applies the given permutation on the
## list. If not supplied, the function generates a random permutation.
##
## -- Returns --
## List[] - The shuffled list.
apply.permute <- function(list, permutation=NULL){
if(debug) message("Calling apply.permute() with arguments ",
list, ", ", permutation)
## input checks
if(!(is.vector(list))) stop("Supplied a non-vector in apply.permute()")
perm <- if(!is.null(permutation)){
permutation
} else {
get.permute(length(list))
}
tryCatch({if(!isTRUE(all(perm == floor(perm)))){
stop("Supplied permutation in apply.permute() is not a list of",
"integers.")}},
error = function(a){
stop("Supplied permutation in apply.permute() is not a",
"list of numbers.")
})
if(debug) message("Permutation used in apply.permute: ", perm)
## apply the permutation on the given list.
s <- rep(NA, length(list))
for(var in 1:length(list)){
s[var] <- list[perm[var]]
}
return(s)
}
## -- apply.teststatistic (List list, function teststatistic) --
## Applies the given test statistic on the given list. The function
## will throw an error if there is a type mismatch: for example, if the
## test statistic is a function that processes strings but the given list
## is a list of booleans. In essence this wrapper is an error handler.
##
## -- Arguments --
## list: Any generic list.
## teststatistic: Any appropriate function as long as teststatistic takes
## one list input.
## m: Demarcates where to cutoff the data to get (X_1, ..., X_m). Default
##    is the gm variable.
## n: Sanity check to ensure m+n adds up. Default is the gn variable.
##
## -- Returns --
## x - The output of the test statistic as applied to the given list. This
##     can be anything, depending on the supplied test statistic. If the
##     output is NOT a number, also generates a warning (but does not abort).
apply.teststatistic <- function(list, teststatistic,
m=gm, n=gn){
if(!is.function(teststatistic)) stop("Supplied test statistic",
"is not a function!")
r <- tryCatch({teststatistic(data=list, m, n)},
error = function(a){
stop("Failed to apply the test statistic on the data!",
"\n", "Supplied list: ", list, "\n",
"Error: ", a)
})
if(!is.numeric(r)) message("Warning: The test statistic generated, ", r,
" is not a number.")
return(r[1])
}
## -- apply.tpermute (List data, function teststatistic, int rep) --
## Applies the given test statistic on rep numbers of random permutations of
## the data.
##
## -- Arguments --
## data: Any generic list.
## teststatistic: Any appropriate function as long as teststatistic takes
## one list input.
##
## -- Optional Arguments --
## rep: Number of replications. (Default: 500)
## according to the given seed.
## m: Demarcates where to cutoff the data to get (X_1, ..., X_m). Default
##    is the gm variable.
## n: Sanity check to ensure m+n adds up. Default is the gn variable.
##
## -- Returns --
## r - The list of outputs of the test statistic as applied to the data
##     rep number of times.
apply.tpermute <- function(data, teststatistic, rep=500,
m=gm, n=gn){
if(debug) message("Calling apply.tpermute() with arguments ",
data, ", ", "with test statistic ",
deparse(substitute(teststatistic)), ", ",
rep)
permutations <- replicate(500, vector(length=40), simplify=FALSE)
for(var in 1:rep){
permutations[var] <- apply.permute(data)
}
r <- rep(NA, rep)
for(var in 1:rep){  ## function-passing is thread-unsafe, so we have
## to use a traditional for loop.
r[var] <- apply.teststatistic(permutations[var],
teststatistic, m=m, n=n)
}
return(r)
}
## -- reject (List data, function teststatistic, int rep,
##             int alpha) --
## Determine whether to reject the original data based on the
## two-sample permutation test. Specifically, we reject if
## T_{m, n}(Z_1, ..., Z_N) > c_{1-alpha}, where T_{m, n} is the test statistic,
## c_{1-alpha} is the (1-alpha)-quantile of the genereated list by applying
## T_{m, n} on random permutations of the original data, (Z_1, ..., Z_n).
##
## -- Arguments --
## data: Any generic list.
## teststatistic: Any appropriate function as long as teststatistic takes
## one list input.
##
## -- Optional Arguments --
## rep: Number of replications. (Default: 500)
## alpha: The threshold of rejection.
## according to the given seed.
## m: Demarcates where to cutoff the data to get (X_1, ..., X_m). Default
##    is the gm variable.
## n: Sanity check to ensure m+n adds up. Default is the gn variable.
##
## -- Returns --
## r - The list of outputs of the test statistic as applied to the data
##     rep number of times.
reject <- function(data, teststatistic, rep=500, alpha=0.05,
m=gm, n=gn){
if(debug) message("Calling reject() with arguments ",
data, ", ", "with test statistic ",
deparse(substitute(teststatistic)), ", ",
rep, " ", alpha)
## get the test statistics on the permuted data
tperms <- apply.tpermute(data, teststatistic, rep=rep,
m=m, n=n)
## check if every entry is a numeric value.
if(!reduce(tperms,
function(a, b){a && is.numeric(b)},
.init=TRUE)) stop("The test statistic generated",
" a non-numeric output.")
## get the (1-alpha)-quantile. Default type 7 (continuous quantile).
c <- quantile(tperms, probs=(1-alpha), na.rm=TRUE)
if(debug) message("Computed (1-", alpha, ")-quantile: ", c)
## get the test statistic for the original data.
origt <- apply.teststatistic(data, teststatistic, m=m, n=n)
if(debug) message("Original Test Statistic: ", origt)
## decide whether to reject
rej <- ifelse(origt>c, 1, 0)
return(rej)
}
## -- splitAt(vector, pos) --
## Splits vector at position.
## Ex: (1, 3, 5, 7, 9) with pos=2 => (1), (3, 5, 7, 9)
splitAt <- function(vector, pos){
unname(split(vector, cumsum(seq_along(vector) %in% pos)))
}
r11 <- mc(m = 20,
n = 20,
xfunc = rnorm,
yfunc = rnorm,
test = t1,
alpha = 0.05,
xdist = list(0, 1),
ydist = list(0, 1),
reps = 1)
apply.tpermute <- function(data, teststatistic, rep=500,
m=gm, n=gn){
if(debug) message("Calling apply.tpermute() with arguments ",
data, ", ", "with test statistic ",
deparse(substitute(teststatistic)), ", ",
rep)
permutations <<- replicate(500, vector(length=40), simplify=FALSE)
for(var in 1:rep){
permutations[var] <- apply.permute(data)
}
r <- rep(NA, rep)
for(var in 1:rep){  ## function-passing is thread-unsafe, so we have
## to use a traditional for loop.
r[var] <- apply.teststatistic(permutations[var],
teststatistic, m=m, n=n)
}
return(r)
}
r11 <- mc(m = 20,
n = 20,
xfunc = rnorm,
yfunc = rnorm,
test = t1,
alpha = 0.05,
xdist = list(0, 1),
ydist = list(0, 1),
reps = 1)
View(permutations)
permutations[1] <-1
View(permutations)
apply.tpermute <- function(data, teststatistic, rep=500,
m=gm, n=gn){
if(debug) message("Calling apply.tpermute() with arguments ",
data, ", ", "with test statistic ",
deparse(substitute(teststatistic)), ", ",
rep)
permutations <<- replicate(500, vector(length=40), simplify=FALSE)
for(var in 1:rep){
permutations[var] <<- apply.permute(data)
}
r <- rep(NA, rep)
for(var in 1:rep){  ## function-passing is thread-unsafe, so we have
## to use a traditional for loop.
r[var] <- apply.teststatistic(permutations[var],
teststatistic, m=m, n=n)
}
return(r)
}
r11 <- mc(m = 20,
n = 20,
xfunc = rnorm,
yfunc = rnorm,
test = t1,
alpha = 0.05,
xdist = list(0, 1),
ydist = list(0, 1),
reps = 1)
View(permutations)
## alpha: rejection threshold
## xdist: Parameters passed to xfunc, other than the first.
## ydist: Parameters passed to yfunc, other than the first.
## reps: Passed to the first argument of xfunc and yfunc,
##       For most R standard functions this would be number of reps.
## seed: Run the simulation with the given seed for replication
##       purposes.
##
## -- Returns --
## r - Probability of rejection.
mc <- function(m=gm, n=gn, xfunc=rnorm, yfunc=rnorm, test, alpha=0.05,
xdist=list(0, 0), ydist=list(0, 0), reps=500){
## input checks
if((!is.function(xfunc)) || (!is.function(yfunc))) stop(
"Supplied xfunc or yfunc is not a function."
)
if((!is.list(xdist)) || (!is.list(ydist))) stop(
"Supplied xdist or ydist is not a list of parameters. Note:",
" numerical arrays are not lists."
)
rejects <- rep(NA, greps)
for(v in 1:reps){
if(!suppress) message("Loop ", v)
## generate {X_i}, {Y_i}
x <- do.call(xfunc, c(m,xdist))
y <- do.call(yfunc, c(n,ydist))
## merge into z.
z <- c(x,y) ## this is not a list.
## test rejection
rejects[v] <- reject(z, test, rep=reps, alpha=alpha, m=m, n=n)
}
return(sum(rejects))
}
r11 <- mc(m = 20,
n = 20,
xfunc = rnorm,
yfunc = rnorm,
test = t1,
alpha = 0.05,
xdist = list(0, 1),
ydist = list(0, 1),
reps = 1)
greps=500 ## The number of random permutations to generate (B in step 3).
r11 <- mc(m = 20,
n = 20,
xfunc = rnorm,
yfunc = rnorm,
test = t1,
alpha = 0.05,
xdist = list(0, 1),
ydist = list(0, 1),
reps = 1)
## alpha: rejection threshold
## xdist: Parameters passed to xfunc, other than the first.
## ydist: Parameters passed to yfunc, other than the first.
## reps: Passed to the first argument of xfunc and yfunc,
##       For most R standard functions this would be number of reps.
## seed: Run the simulation with the given seed for replication
##       purposes.
##
## -- Returns --
## r - Probability of rejection.
mc <- function(m=gm, n=gn, xfunc=rnorm, yfunc=rnorm, test, alpha=0.05,
xdist=list(0, 0), ydist=list(0, 0), reps=500){
## input checks
if((!is.function(xfunc)) || (!is.function(yfunc))) stop(
"Supplied xfunc or yfunc is not a function."
)
if((!is.list(xdist)) || (!is.list(ydist))) stop(
"Supplied xdist or ydist is not a list of parameters. Note:",
" numerical arrays are not lists."
)
rejects <- rep(NA, reps)
for(v in 1:reps){
if(!suppress) message("Loop ", v)
## generate {X_i}, {Y_i}
x <- do.call(xfunc, c(m,xdist))
y <- do.call(yfunc, c(n,ydist))
## merge into z.
z <- c(x,y) ## this is not a list.
## test rejection
rejects[v] <- reject(z, test, rep=greps, alpha=alpha, m=m, n=n)
}
return(sum(rejects))
}
r11 <- mc(m = 20,
n = 20,
xfunc = rnorm,
yfunc = rnorm,
test = t1,
alpha = 0.05,
xdist = list(0, 1),
ydist = list(0, 1),
reps = 1)
View(permutations)
permutations <<- replicate(500, vector(length=40), simplify=FALSE)
View(permutations)
permutations[var] <<- apply.permute(data)
for(var in 1:500){
permutations[var] <<- apply.permute(data)
}
View(permutations)
for(var in 1:500){
permutations[var] <<- apply.permute(1:40)
}
for(var in 1:500){
permutations[var] <- apply.permute(1:40)
}
View(permutations)
permutations <<- replicate(500, vector(length=40), simplify=FALSE)
View(permutations)
a <- apply.permute(rep(1, 40))
permutations[1]<- a
View(permutations)
permutations[[1]] <- a
View(permutations)
apply.tpermute <- function(data, teststatistic, rep=500,
m=gm, n=gn){
if(debug) message("Calling apply.tpermute() with arguments ",
data, ", ", "with test statistic ",
deparse(substitute(teststatistic)), ", ",
rep)
permutations <<- replicate(500, vector(length=40), simplify=FALSE)
for(var in 1:rep){
permutations[[var]] <<- apply.permute(data)
}
r <- rep(NA, rep)
for(var in 1:rep){  ## function-passing is thread-unsafe, so we have
## to use a traditional for loop.
r[var] <- apply.teststatistic(permutations[var],
teststatistic, m=m, n=n)
}
return(r)
}
r11 <- mc(m = 20,
n = 20,
xfunc = rnorm,
yfunc = rnorm,
test = t1,
alpha = 0.05,
xdist = list(0, 1),
ydist = list(0, 1),
reps = 1)
View(permutations)
t1 <- function(data, m=gm, n=gn){
if(debug) message("Calling test statistic 1 with ", data, ", ", m,
" and ", n, " with data length ", length(data))
## input checks
if(!reduce(data,
function(a, b){a && is.numeric(b)},
.init=TRUE)) stop("The data supplied to test statistic 1",
" is not numeric.")
if(!is.numeric(m) || !is.numeric(n)) stop("m or n supplied ",
"to test statistic 1 is not",
" numeric.")
if(!((m+n)==length(data))) message("Warning: m+n =/= N in test",
" statistic 1.")
b <- splitAt(data, m+1)
x <- b[1]
y <- b[2]
x.mean <- mean(unlist(x))
y.mean <- mean(unlist(y))
r <- abs((sqrt(length(data)))*(x.mean-y.mean))
if(debug) message("Computed t1 statistic: ", r)
return(r)
}
r11 <- mc(m = 20,
n = 20,
xfunc = rnorm,
yfunc = rnorm,
test = t1,
alpha = 0.05,
xdist = list(0, 1),
ydist = list(0, 1),
reps = 1)
