## Charles Shi
## Question 2 for the Research Professional Assessment for Shaikh
## & Tabord-Meehan.
## github repository:
## https://github.com/Skyrior/Simplified-Covariate-Adaptive-Permutation-Test
## R version: 4.0.3

## -- debug --
## Set to true to turn on most messages in functions to trace
## what is happening to the data.

debug = TRUE

## -- get.permute (int N, int seed) --
## A permutation is a mapping from {1, ..., N} to {1, ..., N}.
## The get.permute function constructs a random permutation.
## 
## -- Arguments --
## N: integer in [1, \infty).
##
## -- Optional Arguments --
## seed: If supplied, gives a permutation that is randomized
## according to the given seed.
##
## -- Returns --
## List[] - a list of the second components of the permutation, in order.
## For example if a permutation is {(1, 3), (2, 1), (3, 2)}
## then this function outputs {3, 1, 2}.

get.permute <- function(N, seed=NULL){
  
  if(debug) message("Calling get.permute() with arguments ", N, " and ", seed)
  set.seed(seed)
  
  ## input checks
  tryCatch({tempvar <<- ((N%%1 == 0) && (N>=1))},
           error = function(a){
             stop("Supplied 'N' in get.permute() is not a positive integer.")
           })
  if(!tempvar) stop("Supplied 'N' in get.permute() is not a positive integer.")
  if(debug) message("Input in get.permute validated.")
  n <- as.integer(N)
  
  ## create a list from 1 to N
  li <- 1:N
  
  ## produces a random, unbiased permutation with Fisher-Yates shuffle
  r <- sample(li)
  
  ## resets the seed
  set.seed(NULL)
  ## output the permutation
  return(r)
}

## -- apply.permute (List list, List permutation, int seed) --
## Applies a permutation on the given list, effectively shuffling it.
## 
## -- Arguments --
## list: Any generic list.
##
## -- Optional Arguments --
## permutation: If supplied, applies the given permutation on the
## list. If not supplied, the function generates a random permutation.
## seed: If supplied, gives a permutation that is randomized
## according to the given seed.
##
## -- Returns --
## List[] - The shuffled list.

apply.permute <- function(list, permutation=NULL, seed=NULL){
  if(debug) message("Calling apply.permute() with arguments ",
                    list, ", ", permutation, " and ", seed)
  set.seed(seed)
  
  ## input checks
  if(!(is.vector(list))) stop("Supplied a non-vector in apply.permute()")
  ## technically, everything is a vector.
  
  
}
